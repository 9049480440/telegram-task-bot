import sqlite3
import json
from datetime import datetime, timedelta

DB_FILE = "db.sqlite3"

def get_connection():
    return sqlite3.connect(DB_FILE)

# üß± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def create_tables():
    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS tasks (
        id TEXT PRIMARY KEY,
        user_id INTEGER,
        title TEXT,
        deadline TEXT,
        time TEXT,
        calendar_event_id TEXT,
        sheet_row INTEGER,
        status TEXT,
        msg_id INTEGER,
        created_at TEXT,
        completed_at TEXT,
        hours_spent REAL
    );
    """)

    cursor.execute("""
    CREATE TABLE IF NOT EXISTS pending_tasks (
        user_id INTEGER PRIMARY KEY,
        title TEXT,
        deadline TEXT,
        time TEXT,
        assigned_by TEXT,
        comment TEXT,
        step TEXT,
        messages TEXT,
        files TEXT,
        forwarded_from TEXT
    );
    """)

    conn.commit()
    conn.close()

# ‚úÖ Tasks (–æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏)
def add_task(task):
    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("""
    INSERT INTO tasks (id, user_id, title, deadline, time, calendar_event_id, sheet_row,
        status, msg_id, created_at, completed_at, hours_spent)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        task["id"],
        task["user_id"],
        task["title"],
        task["deadline"],
        task.get("time", "10:00"),
        task["calendar_event_id"],
        task["sheet_row"],
        task["status"],
        task["msg_id"],
        task["created_at"],
        task["completed_at"],
        task["hours_spent"]
    ))

    conn.commit()
    conn.close()

def get_active_tasks(user_id=None, deadline=None):
    conn = get_connection()
    cursor = conn.cursor()

    query = "SELECT * FROM tasks WHERE status = 'active'"
    params = []

    if user_id:
        query += " AND user_id = ?"
        params.append(user_id)

    if deadline == "tomorrow":
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        query += " AND deadline = ?"
        params.append(tomorrow)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
    query += " ORDER BY date(deadline), time"

    cursor.execute(query, params)
    rows = cursor.fetchall()
    conn.close()
    return rows

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ database.py

def complete_task(task_id, hours_spent):
    conn = get_connection()
    cursor = conn.cursor()
    
    current_time = datetime.now().isoformat()
    
    cursor.execute("""
    UPDATE tasks
    SET status = 'done',
        completed_at = ?,
        hours_spent = ?
    WHERE id = ?
    """, (current_time, hours_spent, task_id))

    conn.commit()
    conn.close()
    
    return current_time  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö

def update_task_deadline(task_id, new_deadline):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("""
    UPDATE tasks SET deadline = ? WHERE id = ?
    """, (new_deadline, task_id))
    conn.commit()
    conn.close()

def update_task_status(task_id, status):
    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("""
    UPDATE tasks 
    SET status = ? 
    WHERE id = ?
    """, (status, task_id))

    conn.commit()
    conn.close()
    print(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {status}")

# üîî –ó–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —á–µ—Ä–µ–∑ 1 —á–∞—Å
# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è database.py
def get_tasks_due_in_one_hour():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏, –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ 1-1.5 —á–∞—Å–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è.
    """
    conn = get_connection()
    cursor = conn.cursor()

    now = datetime.now()
    
    # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞: –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —á–µ—Ä–µ–∑ 45-90 –º–∏–Ω—É—Ç
    min_time = now + timedelta(minutes=45)
    max_time = now + timedelta(minutes=90)
    
    min_str = min_time.strftime("%Y-%m-%d %H:%M")
    max_str = max_time.strftime("%Y-%m-%d %H:%M")
    
    print(f"–ò—â—É –∑–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –º–µ–∂–¥—É {min_str} –∏ {max_str}")

    cursor.execute("""
        SELECT * FROM tasks
        WHERE status = 'active'
        AND datetime(deadline || ' ' || COALESCE(time, '10:00')) BETWEEN ? AND ?
    """, (min_str, max_str))

    rows = cursor.fetchall()
    conn.close()
    
    if rows:
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–¥–∞—á —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º—Å—è –¥–µ–¥–ª–∞–π–Ω–æ–º")
    
    return rows

# ‚è≥ Pending tasks (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è)
def add_pending_task(user_id, data: dict):
    conn = get_connection()
    cursor = conn.cursor()

    cursor.execute("REPLACE INTO pending_tasks (user_id, step, messages, files, forwarded_from) VALUES (?, ?, ?, ?, ?)", (
        user_id,
        data.get("step"),
        json.dumps(data.get("messages", [])),
        json.dumps(data.get("files", [])),
        data.get("forwarded_from")
    ))

    conn.commit()
    conn.close()

def get_pending_task(user_id):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM pending_tasks WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()

    if not row:
        conn.close()
        return None

    columns = [column[0] for column in cursor.description]
    result = dict(zip(columns, row))
    conn.close()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–∫–∏
    for key in ["messages", "files"]:
        try:
            result[key] = json.loads(result[key]) if result[key] else []
        except:
            result[key] = []

    return result

def update_pending_task(user_id, updates: dict):
    conn = get_connection()
    cursor = conn.cursor()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
    cursor.execute("SELECT * FROM pending_tasks WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()

    if not row:
        conn.close()
        return

    columns = [column[0] for column in cursor.description]
    existing = dict(zip(columns, row))

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    for key, value in updates.items():
        if key in ["messages", "files"] and isinstance(value, list):
            existing[key] = json.dumps(value)
        else:
            existing[key] = value

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å–ø–∏—Å–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if isinstance(existing["messages"], list):
        existing["messages"] = json.dumps(existing["messages"])
    if isinstance(existing["files"], list):
        existing["files"] = json.dumps(existing["files"])

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—ë
    cursor.execute("""
        UPDATE pending_tasks SET
            title = ?,
            deadline = ?,
            time = ?,
            assigned_by = ?,
            comment = ?,
            step = ?,
            messages = ?,
            files = ?,
            forwarded_from = ?
        WHERE user_id = ?
    """, (
        existing.get("title"),
        existing.get("deadline"),
        existing.get("time"),
        existing.get("assigned_by"),
        existing.get("comment"),
        existing.get("step"),
        existing.get("messages"),
        existing.get("files"),
        existing.get("forwarded_from"),
        user_id
    ))

    conn.commit()
    conn.close()



def delete_pending_task(user_id):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM pending_tasks WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ database.py, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

def get_task_by_id(task_id):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –µ—ë ID.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM tasks WHERE id = ?", (task_id,))
    task = cursor.fetchone()
    
    conn.close()
    return task

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
def add_completion_comment(task_id, comment):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ comment –≤ —Ç–∞–±–ª–∏—Ü–µ tasks.
    """
    conn = get_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
    UPDATE tasks
    SET comment = ?
    WHERE id = ?
    """, (comment, task_id))
    
    conn.commit()
    conn.close()
    
    return True

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ database.py –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏

def add_comment_column():
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É comment –≤ —Ç–∞–±–ª–∏—Ü—É tasks, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    conn = get_connection()
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ comment
    cursor.execute("PRAGMA table_info(tasks)")
    columns = cursor.fetchall()
    column_names = [col[1] for col in columns]
    
    if "comment" not in column_names:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É comment
        try:
            cursor.execute("ALTER TABLE tasks ADD COLUMN comment TEXT")
            print("–ö–æ–ª–æ–Ω–∫–∞ comment —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É tasks")
        except sqlite3.OperationalError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏: {e}")
    else:
        print("–ö–æ–ª–æ–Ω–∫–∞ comment —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ tasks")
    
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤—å—Ç–µ –≤—ã–∑–æ–≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –±–ª–æ–∫ if __name__ == "__main__": –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞

if __name__ == "__main__":
    create_tables()
    add_comment_column()  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

# üõ† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    create_tables()
