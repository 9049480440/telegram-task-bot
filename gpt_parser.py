# gpt_parser.py

import openai
import os
import json

openai.api_key = os.getenv("OPENAI_API_KEY")


def parse_task(text: str, files: list[str] = None, sender_name: str = None) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ GPT –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ.
    """

    files_info = ""
    if files:
        files_info = "\n\n–¢–∞–∫–∂–µ –∫ –∑–∞–¥–∞—á–µ –ø—Ä–∏–ª–æ–∂–µ–Ω—ã —Ñ–∞–π–ª—ã:\n" + "\n".join(f"üìé {f}" for f in files)

    sender_info = f"\n\n–°–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω—ã –æ—Ç: {sender_name}" if sender_name else ""

    full_prompt = f"""
–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–∞–º–∏.

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∑–∞–¥–∞—á–∏. –ù–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ:
1. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ü–û–õ–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–≤–Ω—è—Ç–Ω–æ–µ, —Å–≤—è–∑–Ω–æ–µ, –≤ –æ–¥–Ω—É —Ñ—Ä–∞–∑—É).
2. –ò–∑–≤–ª–µ–∫–∏:
   - —Å—Ä–æ–∫ (deadline) ‚Äî —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
   - –≤—Ä–µ–º—è (task_time) ‚Äî —Ñ–æ—Ä–º–∞—Ç HH:MM
   - –∫—Ç–æ –¥–∞–ª –∑–∞–¥–∞—á—É (task_giver)
   - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç (comment)
   - —Å—Å—ã–ª–∫–∏ (links) ‚Äî –≤—ã–¥–µ–ª–∏ –≤—Å–µ, —á—Ç–æ –µ—Å—Ç—å

–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç ‚Äî –ø–∏—à–∏ null.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—Ä–æ–≥–æ JSON:
{{
  "task_title": "...",
  "deadline": "YYYY-MM-DD" –∏–ª–∏ null,
  "task_time": "HH:MM" –∏–ª–∏ null,
  "task_giver": "–ò–º—è –∏–ª–∏ –æ—Ç–¥–µ–ª" –∏–ª–∏ null,
  "comment": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏" –∏–ª–∏ null,
  "links": ["https://...", "..."]
}}

–í–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∑–∞–¥–∞—á–∏:
\"\"\"
{text}
\"\"\"{sender_info}{files_info}
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": full_prompt}],
            temperature=0.3,
            max_tokens=700,
        )
        content = response.choices[0].message["content"]
        return json.loads(content)

    except Exception as e:
        print("GPT error:", e)
        return {}
