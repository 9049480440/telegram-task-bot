from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from database import add_pending_task, get_pending_task, update_pending_task, delete_pending_task
from gpt_parser import parse_task
from aiogram.fsm.storage.base import StorageKey


def get_collect_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="collect_done"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="collect_cancel"),
            InlineKeyboardButton(text="üîÅ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_task")
        ]
    ])


async def start_collecting_task(message: Message):
    user_id = message.from_user.id
    task_data = {
        "step": "collecting",
        "messages": [],
        "files": [],
        "forwarded_from": None
    }
    add_pending_task(user_id, task_data)

    await message.answer(
        "üìÇ –ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–µ—Ä–µ—à–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç. –ù–∞–∂–º–∏ <b>–ì–æ—Ç–æ–≤–æ</b>, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å.",
        reply_markup=get_collect_keyboard()
    )


async def handle_collecting_messages(message: Message):
    user_id = message.from_user.id
    pending = get_pending_task(user_id)
    if not pending:
        return

    messages = pending.get("messages", [])
    files = pending.get("files", [])
    sender = pending.get("forwarded_from")

    if message.text:
        messages.append(message.text)
    elif message.caption:
        messages.append(message.caption)
    else:
        messages.append(None)

    if document := message.document:
        files.append(document.file_name)
    elif photo := message.photo:
        files.append("—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è")

    if not sender:
        if message.forward_from:
            sender = message.forward_from.full_name
        elif message.forward_sender_name:
            sender = message.forward_sender_name

    update_pending_task(user_id, {
        "messages": messages,
        "files": files,
        "forwarded_from": sender,
    })

    await message.answer(
        "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ! –ü–µ—Ä–µ—à–ª–∏ –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å.",
        reply_markup=get_collect_keyboard()
    )


async def handle_text_reply(message: Message):
    user_id = message.from_user.id
    pending = get_pending_task(user_id)

    if not pending:
        return await message.answer("‚ö†Ô∏è –Ø –Ω–µ –Ω–∞—à—ë–ª –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å. –ù–∞–ø–∏—à–∏ /–∑–∞–¥–∞—á–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    step = pending.get("step")

    if step in ["ask_deadline", "edit_deadline"]:
        pending["deadline"] = message.text.strip()
        if step == "ask_deadline":
            pending["step"] = "ask_time"
            update_pending_task(user_id, pending)
            return await message.answer("‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É?")

    elif step in ["ask_time", "edit_time"]:
        pending["time"] = message.text.strip()

        if step == "ask_time":
            # ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if not pending.get("assigned_by") and pending.get("forwarded_from"):
                pending["assigned_by"] = pending["forwarded_from"]
                pending["step"] = "confirm_assigned_by"
            elif pending.get("assigned_by") and pending["assigned_by"] not in {"", "null", None}:
                pending["step"] = "ask_comment"
            else:
                pending["step"] = "ask_assigned_by"

            update_pending_task(user_id, pending)

            if pending["step"] == "confirm_assigned_by":
                return await message.answer(
                    f"üë§ –Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —á—Ç–æ –∑–∞–¥–∞—á—É –ø–æ—Å—Ç–∞–≤–∏–ª: <b>{pending['assigned_by']}</b>. –≠—Ç–æ –≤–µ—Ä–Ω–æ?",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_assigned_yes"),
                            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_assigned_no")
                        ]
                    ])
                )

            if pending["step"] == "ask_comment":
                return await message.answer("üí¨ –•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?")
            return await message.answer("üë§ –ö—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É?")

    elif step in ["ask_assigned_by", "edit_assigned_by", "edit_assigned"]:
        pending["assigned_by"] = message.text.strip()
        if step == "ask_assigned_by":
            pending["step"] = "ask_comment"
            update_pending_task(user_id, pending)
            return await message.answer("üí¨ –•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?")

    elif step == "confirm_assigned_by":
        if pending.get("assigned_by") and pending["assigned_by"] not in {"", "null", None}:
            return await message.answer(
                f"üë§ –Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —á—Ç–æ –∑–∞–¥–∞—á—É –ø–æ—Å—Ç–∞–≤–∏–ª: <b>{pending['assigned_by']}</b>. –≠—Ç–æ –≤–µ—Ä–Ω–æ?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_assigned_yes"),
                        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_assigned_no")
                    ]
                ])
            )
        else:
            pending["step"] = "ask_assigned_by"
            update_pending_task(user_id, pending)
            return await message.answer("üë§ –ö—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É?")

    elif step in ["ask_comment", "edit_comment"]:
        pending["comment"] = message.text.strip()
        pending["step"] = "confirm"

    elif step == "edit_title":
        pending["title"] = message.text.strip()
        pending["step"] = "confirm"

    else:
        return await message.answer("‚ö†Ô∏è –Ø –Ω–µ–º–Ω–æ–≥–æ –∑–∞–ø—É—Ç–∞–ª—Å—è. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏ /–∑–∞–¥–∞—á–∞.")

    update_pending_task(user_id, pending)

    return await message.answer(
        f"""üìå –ó–∞–¥–∞—á–∞: {pending.get('title', '‚Äì')}
üìÖ –°—Ä–æ–∫: {pending.get('deadline', '‚Äì')}
‚è∞ –í—Ä–µ–º—è: {pending.get('time', '‚Äì')}
üë§ –ü–æ—Å—Ç–∞–≤–∏–ª: {pending.get('assigned_by', '‚Äì')}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {pending.get('comment', '‚Äì')}

–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å?""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_add"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_add")
            ]
        ])
    )




async def route_message(message: Message):
    user_id = message.from_user.id
    pending = get_pending_task(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è,
    # —Ç–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    from aiogram.fsm.context import FSMContext
    from aiogram.fsm.storage.memory import MemoryStorage
    from task_actions import TaskStates
    
    # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    storage = MemoryStorage()
    state_context = FSMContext(storage=storage, key=StorageKey(user_id=user_id, chat_id=message.chat.id, bot_id=0))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state_context.get_state()
    
    # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    if current_state == TaskStates.waiting_for_comment.state:
        # –ü–æ–∑–≤–æ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    # –†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if pending and pending.get("step") == "confirm":
        task_data = {
            "step": "collecting",
            "messages": [message.text if message.text else message.caption],
            "files": [],
            "forwarded_from": message.forward_from.full_name if message.forward_from else (
                message.forward_sender_name if message.forward_sender_name else None
            )
        }

        if document := message.document:
            task_data["files"].append(document.file_name)
        elif photo := message.photo:
            task_data["files"].append("—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è")

        add_pending_task(user_id, task_data)

        return await message.answer(
            "üÜïÔ∏è –ù–∞—á–∞–ª —Å–±–æ—Ä –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –ü–µ—Ä–µ—à–ª–∏ –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=get_collect_keyboard()
        )

    if pending and pending.get("step") == "collecting":
        return await handle_collecting_messages(message)

    if pending and pending.get("step") in {
        "ask_deadline", "ask_time", "ask_assigned_by", "ask_comment",
        "confirm_assigned_by", "edit_title", "edit_deadline", "edit_time",
        "edit_assigned_by", "edit_comment", "edit_assigned"
    }:
        return await handle_text_reply(message)

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    task_data = {
        "step": "collecting",
        "messages": [message.text if message.text else message.caption],
        "files": [],
        "forwarded_from": message.forward_from.full_name if message.forward_from else (
            message.forward_sender_name if message.forward_sender_name else None
        )
    }

    if document := message.document:
        task_data["files"].append(document.file_name)
    elif photo := message.photo:
        task_data["files"].append("—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è")

    add_pending_task(user_id, task_data)

    await message.answer(
        "üìÇ –ù–∞—á–∞–ª —Å–±–æ—Ä –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏. –ü–µ—Ä–µ—à–ª–∏ –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=get_collect_keyboard()
    )




async def handle_reset_task(callback: CallbackQuery):
    user_id = callback.from_user.id
    delete_pending_task(user_id)
    await callback.message.answer("üîÅ –ó–∞–¥–∞—á–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏ /–∑–∞–¥–∞—á–∞.")


async def handle_confirm_assigned_yes(callback: CallbackQuery):
    user_id = callback.from_user.id
    pending = get_pending_task(user_id)
    if not pending:
        return await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º—è.")
    update_pending_task(user_id, {"step": "ask_comment"})
    await callback.message.answer("üí¨ –•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?")


async def handle_confirm_assigned_no(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_pending_task(user_id, {
        "assigned_by": None,
        "step": "ask_assigned_by"
    })
    await callback.message.answer("üë§ –ö—Ç–æ —Ç–æ–≥–¥–∞ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É?")
