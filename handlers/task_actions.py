from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_pending_task, delete_pending_task, update_pending_task, add_task
from database import complete_task, update_task_deadline, add_completion_comment
from gpt_parser import parse_task
import re
import uuid
from datetime import datetime
from google_sheets import add_task_to_sheet
from google_calendar import add_task_to_calendar, update_event, delete_event
from models.task_model import Task
import sqlite3

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
class TaskStates(StatesGroup):
    waiting_for_hours = State()
    waiting_for_comment = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    waiting_for_new_deadline = State()
    waiting_for_new_time = State()


def extract_links(text):
    url_pattern = r'https?://\S+'
    return re.findall(url_pattern, text)


def get_confirmation_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_add"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_add")]
    ])


def get_confirm_edit_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_add"),
            InlineKeyboardButton(text="üìù –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="edit_fields"),
            InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="mark_done")
        ]
    ])


def get_edit_field_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ó–∞–¥–∞—á–∞", callback_data="edit_title"),
         InlineKeyboardButton(text="üìÖ –°—Ä–æ–∫", callback_data="edit_deadline")],
        [InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è", callback_data="edit_time"),
         InlineKeyboardButton(text="üë§ –ö—Ç–æ –¥–∞–ª", callback_data="edit_assigned")],
        [InlineKeyboardButton(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="edit_comment")]
    ])


def format_task_card(pending):
    files = pending.get("files", [])
    messages = pending.get("messages", [])
    comment = pending.get("comment") or "‚Äî"

    full_text = "\n".join(messages)
    links = extract_links(full_text)

    files_text = "\n".join(f"üìé {f}" for f in files) if files else "‚Äî"
    links_text = "\n".join(f"üîó {l}" for l in links) if links else "‚Äî"

    comment_block = comment
    if files or links:
        comment_block += "\nüìÇ –í–ª–æ–∂–µ–Ω–∏—è:"
        if files:
            comment_block += f"\n{files_text}"
        if links:
            comment_block += f"\n{links_text}"

    return (
        f"üìå –ó–∞–¥–∞—á–∞: {pending.get('title', '‚Äî') or '‚Äî'}\n"
        f"üìÖ –°—Ä–æ–∫: {pending.get('deadline', '‚Äî') or '‚Äî'}\n"
        f"‚è∞ –í—Ä–µ–º—è: {pending.get('time', '‚Äî') or '‚Äî'}\n"
        f"üë§ –ü–æ—Å—Ç–∞–≤–∏–ª: {pending.get('assigned_by', '‚Äî') or '‚Äî'}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_block}"
    )


async def handle_show_final(callback_or_message, user_id=None):
    if not user_id:
        user_id = callback_or_message.from_user.id
    pending = get_pending_task(user_id)
    if not pending:
        return await callback_or_message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏.")

    text = format_task_card(pending) + "\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ?"
    await callback_or_message.answer(text, reply_markup=get_confirm_edit_keyboard())


async def handle_edit_fields(callback: CallbackQuery):
    await callback.message.answer("‚úèÔ∏è –ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_edit_field_keyboard())


async def handle_edit_field_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    field_map = {
        "edit_title": ("title", "üìù –ö–∞–∫ –∑–≤—É—á–∏—Ç –∑–∞–¥–∞—á–∞?"),
        "edit_deadline": ("deadline", "üìÖ –î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞?"),
        "edit_time": ("time", "‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ?"),
        "edit_assigned": ("assigned_by", "üë§ –ö—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É?"),
        "edit_comment": ("comment", "üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?")
    }
    field, prompt = field_map[callback.data]
    update_pending_task(user_id, {"step": f"edit_{field}"})
    await callback.message.answer(prompt)


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handle_collect_done, —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
async def handle_collect_done(callback: CallbackQuery):
    user_id = callback.from_user.id
    pending = get_pending_task(user_id)
    sender_name = pending.get("forwarded_from", None)

    if not pending:
        return await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.")

    messages = pending.get("messages", [])
    files = pending.get("files", [])

    safe_messages = [m for m in messages if isinstance(m, str)]
    combined_text = "\n".join(safe_messages)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ text –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ GPT
    task_data = parse_task(combined_text, files=files, sender_name=sender_name)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –Ω–æ GPT –Ω–µ –¥–æ–±–∞–≤–∏–ª –∏—Ö –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if files and (not task_data.get("comment") or "—Ñ–∞–π–ª" not in task_data.get("comment", "").lower()):
        # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç –∏–ª–∏ –≤ –Ω–µ–º –Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        files_text = "\n".join(f"üìé {f}" for f in files)
        
        if task_data.get("comment"):
            task_data["comment"] += f"\n\nüìÇ –í–ª–æ–∂–µ–Ω–∏—è:\n{files_text}"
        else:
            task_data["comment"] = f"üìÇ –í–ª–æ–∂–µ–Ω–∏—è:\n{files_text}"

    update_fields = {
        "title": task_data.get("task_title"),
        "deadline": task_data.get("deadline"),
        "time": task_data.get("task_time"),
        "assigned_by": task_data.get("task_giver"),
        "comment": task_data.get("comment"),
        "files": files,  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ files –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ pending_task
    }

    update_pending_task(user_id, update_fields)

    print("[DEBUG] assigned_by –∏–∑ GPT =", update_fields["assigned_by"])
    print("[DEBUG] forwarded_from –∏–∑ pending =", sender_name)
    print("[DEBUG] files =", files)

    if not update_fields["deadline"]:
        update_pending_task(user_id, {**update_fields, "step": "ask_deadline"})
        return await callback.message.answer("üìÖ –î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É?")

    if not update_fields["time"]:
        update_pending_task(user_id, {**update_fields, "step": "ask_time"})
        return await callback.message.answer("‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É?")

    if not update_fields["assigned_by"] or update_fields["assigned_by"] in {"", "null", None}:
        if sender_name:
            update_pending_task(user_id, {**update_fields, "step": "forwarded_confirm"})
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="forwarded_yes"),
                 InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="forwarded_no")]
            ])
            return await callback.message.answer(
                f"üë§ –í–∏–∂—É, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç <b>{sender_name}</b>. –ó–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∫–∞–∫ –ø–æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–¥–∞—á—É?",
                reply_markup=keyboard
            )
        else:
            update_pending_task(user_id, {**update_fields, "step": "ask_assigned_by"})
            return await callback.message.answer("üë§ –ö—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É?")
    else:
        update_pending_task(user_id, {**update_fields, "step": "confirm_assigned_by"})
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_assigned_yes"),
             InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_assigned_no")]
        ])
        return await callback.message.answer(
            f"üë§ –Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —á—Ç–æ –∑–∞–¥–∞—á—É –ø–æ—Å—Ç–∞–≤–∏–ª: <b>{update_fields['assigned_by']}</b>. –≠—Ç–æ –≤–µ—Ä–Ω–æ?",
            reply_markup=keyboard
        )


async def handle_confirm_add(callback: CallbackQuery):
    user_id = callback.from_user.id
    pending = get_pending_task(user_id)

    if not pending:
        return await callback.message.answer("‚ö†Ô∏è –ù–µ –º–æ–≥—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if not pending.get("title"):
        update_pending_task(user_id, {"step": "edit_title"})
        return await callback.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        
    if not pending.get("deadline") or pending["deadline"] in ["null", "-", "None", None]:
        update_pending_task(user_id, {"step": "ask_deadline"})
        return await callback.message.answer("üìÖ –î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É?")
        
    if not pending.get("time") or pending["time"] in ["null", "-", "None", None]:
        update_pending_task(user_id, {"step": "ask_time"})
        return await callback.message.answer("‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É?")
        
    if not pending.get("assigned_by") or pending["assigned_by"] in ["null", "-", "None", None]:
        if pending.get("forwarded_from"):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            update_pending_task(user_id, {"step": "forwarded_confirm"})
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="forwarded_yes"),
                 InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="forwarded_no")]
            ])
            return await callback.message.answer(
                f"üë§ –í–∏–∂—É, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç <b>{pending['forwarded_from']}</b>. –ó–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∫–∞–∫ –ø–æ—Å—Ç–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–¥–∞—á—É?",
                reply_markup=keyboard
            )
        else:
            update_pending_task(user_id, {"step": "ask_assigned_by"})
            return await callback.message.answer("üë§ –ö—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É?")

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    task_id = str(uuid.uuid4())
    now = datetime.now().isoformat()

    task_obj = Task(
        id=task_id,
        user_id=user_id,
        title=pending["title"],
        deadline=pending["deadline"],
        time=pending["time"],
        calendar_event_id=None,
        sheet_row=None,
        status="active",
        msg_id=callback.message.message_id,
        created_at=now,
        completed_at=None,
        hours_spent=0.0,
        assigned_by=pending.get("assigned_by"),
        comment=pending.get("comment"),
        links=[]
    )

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Google Sheet
        sheet_row = add_task_to_sheet(task_obj)
        task_obj.sheet_row = sheet_row
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Google Calendar
        calendar_event_id = add_task_to_calendar(
            title=task_obj.title,
            date=task_obj.deadline,
            time=task_obj.time
        )
        task_obj.calendar_event_id = calendar_event_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_task(task_obj.__dict__)
        delete_pending_task(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        result_message = f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
        result_message += f"üìù {task_obj.title}\n"
        result_message += f"üìÖ {task_obj.deadline} –≤ {task_obj.time}\n"
        result_message += f"üë§ –ü–æ—Å—Ç–∞–≤–∏–ª: {task_obj.assigned_by}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
        from handlers.start import main_keyboard
        await callback.message.answer(result_message, reply_markup=main_keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def handle_collect_cancel(callback: CallbackQuery):
    user_id = callback.from_user.id
    delete_pending_task(user_id)
    await callback.message.answer("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


async def handle_forwarded_yes(callback: CallbackQuery):
    user_id = callback.from_user.id
    pending = get_pending_task(user_id)

    if not pending or not pending.get("forwarded_from"):
        return await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")

    update_pending_task(user_id, {
        "assigned_by": pending["forwarded_from"],
        "step": "confirm"  # –ú–µ–Ω—è–µ–º —à–∞–≥ –Ω–∞ "confirm" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö
    })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if not pending.get("deadline") or pending["deadline"] in ["null", "-", "None", None]:
        update_pending_task(user_id, {"step": "ask_deadline"})
        return await callback.message.answer("üìÖ –î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É?")
        
    if not pending.get("time") or pending["time"] in ["null", "-", "None", None]:
        update_pending_task(user_id, {"step": "ask_time"})
        return await callback.message.answer("‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É?")
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    updated_pending = get_pending_task(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    text = format_task_card(updated_pending) + "\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å?"
    await callback.message.answer(text, reply_markup=get_confirmation_keyboard())


async def handle_forwarded_no(callback: CallbackQuery):
    user_id = callback.from_user.id

    update_pending_task(user_id, {
        "step": "ask_assigned_by"
    })
    return await callback.message.answer("üë§ –ö—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É?")


async def handle_confirm_assigned_yes(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_pending_task(user_id, {"step": "ask_comment"})
    await handle_show_final(callback)


async def handle_confirm_assigned_no(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_pending_task(user_id, {
        "assigned_by": None,
        "step": "ask_assigned_by"
    })
    await callback.message.answer("üë§ –ö—Ç–æ —Ç–æ–≥–¥–∞ –ø–æ—Å—Ç–∞–≤–∏–ª –∑–∞–¥–∞—á—É?")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ ID
def get_task_by_id(task_id):
    conn = sqlite3.connect("db.sqlite3")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tasks WHERE id = ?", (task_id,))
    row = cursor.fetchone()
    conn.close()
    
    if not row:
        return None
        
    return row

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
async def handle_mark_done(callback: CallbackQuery, state: FSMContext):
    task_id = callback.data.split('_')[-1]
    task = get_task_by_id(task_id)
    
    if not task:
        await callback.message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    await state.update_data(task_id=task_id)
    await state.set_state(TaskStates.waiting_for_hours)
    await callback.message.answer("‚è±Ô∏è –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2.5)")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ task_actions.py

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handle_hours_input —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def handle_hours_input(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state != TaskStates.waiting_for_hours.state:
        return
        
    try:
        hours = float(message.text.replace(',', '.'))
        if hours < 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(hours_spent=hours)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_comment_yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="add_comment_no")
        ]
    ])
    
    await message.answer("üí¨ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç—á–µ—Ç?", reply_markup=keyboard)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async def handle_add_comment_yes(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞" –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –µ–≥–æ –≤–≤–æ–¥.
    """
    # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.set_state(TaskStates.waiting_for_comment)
    await callback.message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç—á–µ—Ç:")
    await callback.answer()

async def handle_add_comment_no(callback: CallbackQuery, state: FSMContext):
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await complete_task_with_data(callback.message, state, None)
    await callback.answer()
    
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async def handle_comment_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –≤–∫–ª—é—á–∞—è —Å—Å—ã–ª–∫–∏, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if current_state == TaskStates.waiting_for_comment.state:
        # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç)
        comment = message.text
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        await complete_task_with_data(message, state, comment)
    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π,
    # —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
async def complete_task_with_data(message: Message, state: FSMContext, comment=None):
    data = await state.get_data()
    task_id = data.get("task_id")
    hours = data.get("hours_spent")
    
    task = get_task_by_id(task_id)
    if not task:
        await message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    completion_time = complete_task(task_id, hours)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    if comment:
        add_completion_comment(task_id, comment)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
    update_task_in_sheet(task[6], "done", hours, comment)  # task[6] - sheet_row
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    calendar_event_id = task[5]  # task[5] - calendar_event_id
    if calendar_event_id and calendar_event_id != "None" and calendar_event_id != "generated_event_id":
        delete_event(calendar_event_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    from datetime import datetime
    completion_date = datetime.fromisoformat(completion_time).strftime("%d.%m.%Y")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    completion_message = (
        f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task[2]}\" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!\n"
        f"‚è±Ô∏è –¢—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã: {hours} —á.\n"
        f"üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_date}"
    )
    
    if comment:
        completion_message += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    
    await message.answer(completion_message)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–ª–∏—Ç—å"
async def handle_extend_deadline(callback: CallbackQuery, state: FSMContext):
    task_id = callback.data.split('_')[-1]
    task = get_task_by_id(task_id)
    
    if not task:
        await callback.message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    await state.update_data(task_id=task_id)
    await state.set_state(TaskStates.waiting_for_new_deadline)
    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –ì–ì–ì–ì-–ú–ú-–î–î")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å—Ä–æ–∫–∞
async def handle_new_deadline_input(message: Message, state: FSMContext):
    from google_calendar import normalize_date
    
    try:
        new_deadline = normalize_date(message.text)
    except ValueError as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {str(e)}")
        return
    
    await state.update_data(new_deadline=new_deadline)
    await state.set_state(TaskStates.waiting_for_new_time)
    await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)")

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
def normalize_time(time_str):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - 'HH' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10' -> '10:00')
    - 'H' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '9' -> '09:00')
    - 'HH:MM' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10:30')
    - 'H:MM' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '9:30' -> '09:30')
    - 'HH.MM' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10.30' -> '10:30')
    - 'H.MM' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '9.30' -> '09:30')
    - '—É—Ç—Ä–æ' -> '09:00'
    - '–¥–µ–Ω—å' -> '13:00'
    - '–≤–µ—á–µ—Ä' -> '18:00'
    - '–Ω–æ—á—å' -> '23:00'
    """
    import re

    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not time_str or time_str.strip() == "":
        return "10:00"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    time_str = time_str.strip().lower()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    time_keywords = {
        '—É—Ç—Ä–æ': '09:00',
        '—É—Ç—Ä–æ–º': '09:00',
        '–¥–µ–Ω—å': '13:00',
        '–¥–Ω–µ–º': '13:00',
        '–≤–µ—á–µ—Ä': '18:00',
        '–≤–µ—á–µ—Ä–æ–º': '18:00',
        '–Ω–æ—á—å': '23:00',
        '–Ω–æ—á—å—é': '23:00',
        '–ø–æ–ª–¥–µ–Ω—å': '12:00',
        '–ø–æ–ª–Ω–æ—á—å': '00:00'
    }

    if time_str in time_keywords:
        return time_keywords[time_str]

    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ (—á–∞—Å—ã)
    if re.match(r"^\d{1,2}$", time_str):
        hours = int(time_str)
        if 0 <= hours <= 23:
            return f"{hours:02d}:00"
        else:
            raise ValueError("–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23")

    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, H:MM, HH.MM –∏–ª–∏ H.MM
    time_colon_pattern = r"^(\d{1,2}):(\d{2})$"
    time_dot_pattern = r"^(\d{1,2})\.(\d{2})$"

    match_colon = re.match(time_colon_pattern, time_str)
    match_dot = re.match(time_dot_pattern, time_str)

    if match_colon:
        hours, minutes = map(int, match_colon.groups())
    elif match_dot:
        hours, minutes = map(int, match_dot.groups())
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        time_extra_pattern = r"^(\d{1,2})[^\d](\d{2})$"
        match_extra = re.match(time_extra_pattern, time_str)
        if match_extra:
            hours, minutes = map(int, match_extra.groups())
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
    if not (0 <= hours <= 23):
        raise ValueError("–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23")
    if not (0 <= minutes <= 59):
        raise ValueError("–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 59")

    return f"{hours:02d}:{minutes:02d}"

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
async def handle_new_time_input(message: Message, state: FSMContext):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        new_time = normalize_time(message.text)

        data = await state.get_data()
        task_id = data.get("task_id")
        new_deadline = data.get("new_deadline")

        task = get_task_by_id(task_id)
        if not task:
            await message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("db.sqlite3")
        cursor = conn.cursor()
        cursor.execute("UPDATE tasks SET deadline = ?, time = ? WHERE id = ?",
                      (new_deadline, new_time, task_id))
        conn.commit()
        conn.close()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –≤ Google Sheets
        update_deadline_in_sheet(task[6], new_deadline)  # task[6] - sheet_row

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        if task[5]:  # task[5] - calendar_event_id
            task_obj = {
                "calendar_event_id": task[5],
                "deadline": new_deadline,
                "time": new_time
            }
            try:
                update_event(task_obj)
                calendar_updated = "–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {e}")
                calendar_updated = "(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ —É–¥–∞–ª–æ—Å—å)"
        else:
            calendar_updated = ""

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = new_deadline
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ISO –¥–∞—Ç—É –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            date_obj = datetime.strptime(new_deadline, "%Y-%m-%d")
            formatted_date = date_obj.strftime("%d.%m.%Y")
        except:
            pass

        await message.answer(f"‚è≥ –°—Ä–æ–∫ –∑–∞–¥–∞—á–∏ \"{task[2]}\" –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {formatted_date} {new_time} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü–µ {calendar_updated}")
        await state.clear()

    except ValueError as e:
        await message.answer(f"‚ö†Ô∏è {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –¥–ª—è 10:00, 15:30, '—É—Ç—Ä–æ–º', '–≤–µ—á–µ—Ä–æ–º' –∏ —Ç.–¥.)")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Google Sheets
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ task_actions.py

def update_task_in_sheet(row, status, hours=None, comment=None):
    import gspread
    import json
    from oauth2client.service_account import ServiceAccountCredentials
    import os
    from datetime import datetime
    
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    
    # –ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
    creds_dict = json.loads(creds_json)
    
    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —Å –ø–æ–º–æ—â—å—é —Å–ª–æ–≤–∞—Ä—è
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)
    
    sheet_id = os.getenv("GOOGLE_SHEET_ID")
    tab_name = os.getenv("GOOGLE_SHEET_TAB_NAME", "Tasks")
    
    sheet = client.open_by_key(sheet_id).worksheet(tab_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    sheet.update_cell(row, 8, status)  # 8 - –∫–æ–ª–æ–Ω–∫–∞ H (–°—Ç–∞—Ç—É—Å)
    
    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    if status == "done" and hours is not None:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã
        sheet.update_cell(row, 7, str(hours))  # 7 - –∫–æ–ª–æ–Ω–∫–∞ G (–¢—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –∫–æ–ª–æ–Ω–∫–∞ D
        current_date = datetime.now().strftime("%Y-%m-%d")
        progress_text = f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {current_date}"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ø–æ–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if comment:
            progress_text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (F - –∫–æ–ª–æ–Ω–∫–∞ 6)
            sheet.update_cell(row, 6, comment)
            
        sheet.update_cell(row, 4, progress_text)  # 4 - –∫–æ–ª–æ–Ω–∫–∞ D (–ü—Ä–æ–≥—Ä–µ—Å—Å)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≤ Google Sheets
def update_deadline_in_sheet(row, new_deadline):
    import gspread
    import json
    from oauth2client.service_account import ServiceAccountCredentials
    import os
    
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    
    # –ü–æ–ª—É—á–∞–µ–º JSON –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
    creds_dict = json.loads(creds_json)
    
    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —Å –ø–æ–º–æ—â—å—é —Å–ª–æ–≤–∞—Ä—è
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)
    
    sheet_id = os.getenv("GOOGLE_SHEET_ID")
    tab_name = os.getenv("GOOGLE_SHEET_TAB_NAME", "Tasks")
    
    sheet = client.open_by_key(sheet_id).worksheet(tab_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    sheet.update_cell(row, 3, new_deadline)  # 3 - –∫–æ–ª–æ–Ω–∫–∞ C (–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è)