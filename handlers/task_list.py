from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import get_active_tasks, get_connection
import math

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
TASKS_PER_PAGE = 3

async def handle_task_list(message: types.Message, page=0):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /–º–æ–∏_–∑–∞–¥–∞—á–∏.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ user_id
    tasks = get_active_tasks()
    
    if not tasks:
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    
    total_pages = math.ceil(len(tasks) / TASKS_PER_PAGE)
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    page = max(0, min(page, total_pages - 1))
    
    # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * TASKS_PER_PAGE
    end_idx = min(start_idx + TASKS_PER_PAGE, len(tasks))
    current_tasks = tasks[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    response = f"üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}):\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
    keyboard = []
    
    for i, task in enumerate(current_tasks):
        task_id = task[0]    # id
        title = task[2]      # title
        deadline = task[3]   # deadline
        time = task[4] if task[4] else "‚Äî"  # time
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        short_title = (title[:30] + "...") if len(title) > 30 else title
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –≤ —Å–ø–∏—Å–æ–∫
        response += f"<b>{i+1}.</b> {short_title}\n"
        response += f"    üìÖ {deadline} {time}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        keyboard.append([
            types.InlineKeyboardButton(text=f"üìå –ó–∞–¥–∞—á–∞ {i+1}", callback_data=f"view_task_{task_id}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if total_pages > 1:
        nav_row = []
        if page > 0:
            nav_row.append(types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"task_page_{page-1}"))
        
        if page < total_pages - 1:
            nav_row.append(types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"task_page_{page+1}"))
        
        if nav_row:
            keyboard.append(nav_row)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(response, reply_markup=markup)

async def handle_view_task(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
    """
    task_id = callback.data.split('_')[-1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from database import get_task_by_id
    task = get_task_by_id(task_id)
    
    if not task:
        await callback.message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    title = task[2]        # title
    deadline = task[3]     # deadline
    time = task[4] if task[4] else "‚Äî" # time
    
    # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å assigned_by, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
    task_details = (
        f"üìå <b>{title}</b>\n"
        f"üìÖ –°—Ä–æ–∫: {deadline} {time}\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∑–∞–¥–∞—á–∏
    keyboard = [
        [
            types.InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"mark_done_{task_id}"),
            types.InlineKeyboardButton(text="‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"extend_deadline_{task_id}")
        ],
        [
            types.InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="task_list")
        ]
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.answer(task_details, reply_markup=markup)

async def handle_task_page_navigation(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    """
    page = int(callback.data.split('_')[-1])
    await handle_task_list(callback.message, page=page)

async def handle_task_list_menu(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
    """
    await handle_task_list(callback.message)