import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os
import logging
import time
import sys

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO,
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
import os
log_dir = 'logs'
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è Render
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
console_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)
logger.addHandler(console_handler)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler(os.path.join(log_dir, 'bot_debug.log'))
file_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)
logger.setLevel(logging.DEBUG)

# –¢–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–¥—É–ª—è google_calendar
calendar_logger = logging.getLogger('google_calendar')
calendar_logger.addHandler(console_handler)
calendar_logger.addHandler(file_handler)
calendar_logger.setLevel(logging.DEBUG)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä—Ç–µ –≤ –ª–æ–≥
logger.info("================================")
logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
logger.info("================================")

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –∑–∞–ø—É—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –Ω–∞ Render
def ensure_single_instance():
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    if os.environ.get("BOT_ALREADY_RUNNING") == "True":
        logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
    os.environ["BOT_ALREADY_RUNNING"] = "True"
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ BOT_ALREADY_RUNNING=True")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
ensure_single_instance()

from database import create_tables, get_pending_task, add_comment_column
import scheduler
import handlers.start as start_handler
import handlers.new_task as new_task_handler
import handlers.task_actions as task_actions_handler
import handlers.task_list as task_list_handler

load_dotenv()
logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
logger.info(f"BOT_TOKEN = {os.getenv('BOT_TOKEN')[:5]}...") # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–∞

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")


def clear_pending_tasks():
    import sqlite3
    conn = sqlite3.connect("db.sqlite3")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM pending_tasks")
    conn.commit()
    conn.close()
    logger.info("–û—á–∏—â–µ–Ω—ã –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")


async def handle_keyboard_tasks(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–¥–∞—á–∏' —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    await task_list_handler.handle_task_list(message)

async def handle_keyboard_new_task(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞' —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    await new_task_handler.start_collecting_task(message)


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(start_handler.handle_start, Command("start"))
    dp.message.register(task_list_handler.handle_task_list, Command("–º–æ–∏_–∑–∞–¥–∞—á–∏"))
    dp.message.register(new_task_handler.start_collecting_task, Command("–∑–∞–¥–∞—á–∞"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    dp.message.register(handle_keyboard_tasks, F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    dp.message.register(handle_keyboard_new_task, F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")

    # –í–∞–∂–Ω–æ! –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    dp.message.register(task_actions_handler.handle_hours_input, task_actions_handler.TaskStates.waiting_for_hours)
    dp.message.register(task_actions_handler.handle_comment_input, task_actions_handler.TaskStates.waiting_for_comment)
    dp.message.register(task_actions_handler.handle_new_deadline_input, task_actions_handler.TaskStates.waiting_for_new_deadline)
    dp.message.register(task_actions_handler.handle_new_time_input, task_actions_handler.TaskStates.waiting_for_new_time)

    # –ó–∞—Ç–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback_query
    dp.callback_query.register(task_actions_handler.handle_add_comment_yes, F.data == "add_comment_yes")
    dp.callback_query.register(task_actions_handler.handle_add_comment_no, F.data == "add_comment_no")
    dp.callback_query.register(task_actions_handler.handle_collect_done, F.data == "collect_done")
    dp.callback_query.register(task_actions_handler.handle_collect_cancel, F.data == "collect_cancel")
    dp.callback_query.register(task_actions_handler.handle_confirm_add, F.data == "confirm_add")
    dp.callback_query.register(task_actions_handler.handle_collect_cancel, F.data == "cancel_add")
    dp.callback_query.register(task_actions_handler.handle_forwarded_yes, F.data == "forwarded_yes")
    dp.callback_query.register(task_actions_handler.handle_forwarded_no, F.data == "forwarded_no")
    dp.callback_query.register(new_task_handler.handle_reset_task, F.data == "reset_task")
    dp.callback_query.register(new_task_handler.handle_confirm_assigned_yes, F.data == "confirm_assigned_yes")
    dp.callback_query.register(new_task_handler.handle_confirm_assigned_no, F.data == "confirm_assigned_no")
    dp.callback_query.register(task_actions_handler.handle_edit_fields, F.data == "edit_fields")
    dp.callback_query.register(task_actions_handler.handle_edit_field_selection, F.data.startswith("edit_"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞—á
    dp.callback_query.register(task_actions_handler.handle_mark_done, F.data.startswith("mark_done_"))
    dp.callback_query.register(task_actions_handler.handle_extend_deadline, F.data.startswith("extend_deadline_"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    dp.callback_query.register(task_list_handler.handle_view_task, F.data.startswith("view_task_"))
    dp.callback_query.register(task_list_handler.handle_task_page_navigation, F.data.startswith("task_page_"))
    dp.callback_query.register(task_list_handler.handle_task_list_menu, F.data == "task_list")
    dp.callback_query.register(new_task_handler.start_collecting_task, F.data == "new_task")
    
    # –í –∫–æ–Ω—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∞–º—ã–π –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    dp.message.register(new_task_handler.route_message)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    scheduler.start_scheduler()
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –±–æ—Ç–∞")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        os.environ["BOT_ALREADY_RUNNING"] = "False"


if __name__ == "__main__":
    try:
        create_tables()
        add_comment_column()
        clear_pending_tasks()
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é!")
        os.environ["BOT_ALREADY_RUNNING"] = "False"
    except SystemExit:
        logger.info("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        os.environ["BOT_ALREADY_RUNNING"] = "False"
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        os.environ["BOT_ALREADY_RUNNING"] = "False"