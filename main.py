import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os
import logging
import fcntl
import sys

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
def check_single_instance():
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    lock_file = "/tmp/telegram_bot.lock"
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        lock_handle = open(lock_file, 'w')
        fcntl.flock(lock_handle, fcntl.LOCK_EX | fcntl.LOCK_NB)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID –≤ —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_handle.write(str(os.getpid()))
        lock_handle.flush()
        
        # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        return lock_handle
    except IOError:
        logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        sys.exit(1)

# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
lock_handle = check_single_instance()

from database import create_tables, get_pending_task, add_comment_column
import scheduler
import handlers.start as start_handler
import handlers.new_task as new_task_handler
import handlers.task_actions as task_actions_handler
import handlers.task_list as task_list_handler

load_dotenv()
logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
logger.info(f"BOT_TOKEN = {os.getenv('BOT_TOKEN')[:5]}...") # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–∞

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")


def clear_pending_tasks():
    import sqlite3
    conn = sqlite3.connect("db.sqlite3")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM pending_tasks")
    conn.commit()
    conn.close()
    logger.info("–û—á–∏—â–µ–Ω—ã –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")


async def handle_keyboard_tasks(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–¥–∞—á–∏' —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    await task_list_handler.handle_task_list(message)

async def handle_keyboard_new_task(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞' —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    await new_task_handler.start_collecting_task(message)


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(start_handler.handle_start, Command("start"))
    dp.message.register(task_list_handler.handle_task_list, Command("–º–æ–∏_–∑–∞–¥–∞—á–∏"))
    dp.message.register(new_task_handler.start_collecting_task, Command("–∑–∞–¥–∞—á–∞"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    dp.message.register(handle_keyboard_tasks, F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
    dp.message.register(handle_keyboard_new_task, F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")

    # –í–∞–∂–Ω–æ! –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    dp.message.register(task_actions_handler.handle_hours_input, task_actions_handler.TaskStates.waiting_for_hours)
    dp.message.register(task_actions_handler.handle_comment_input, task_actions_handler.TaskStates.waiting_for_comment)
    dp.message.register(task_actions_handler.handle_new_deadline_input, task_actions_handler.TaskStates.waiting_for_new_deadline)
    dp.message.register(task_actions_handler.handle_new_time_input, task_actions_handler.TaskStates.waiting_for_new_time)

    # –ó–∞—Ç–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback_query
    dp.callback_query.register(task_actions_handler.handle_add_comment_yes, F.data == "add_comment_yes")
    dp.callback_query.register(task_actions_handler.handle_add_comment_no, F.data == "add_comment_no")
    dp.callback_query.register(task_actions_handler.handle_collect_done, F.data == "collect_done")
    dp.callback_query.register(task_actions_handler.handle_collect_cancel, F.data == "collect_cancel")
    dp.callback_query.register(task_actions_handler.handle_confirm_add, F.data == "confirm_add")
    dp.callback_query.register(task_actions_handler.handle_collect_cancel, F.data == "cancel_add")
    dp.callback_query.register(task_actions_handler.handle_forwarded_yes, F.data == "forwarded_yes")
    dp.callback_query.register(task_actions_handler.handle_forwarded_no, F.data == "forwarded_no")
    dp.callback_query.register(new_task_handler.handle_reset_task, F.data == "reset_task")
    dp.callback_query.register(new_task_handler.handle_confirm_assigned_yes, F.data == "confirm_assigned_yes")
    dp.callback_query.register(new_task_handler.handle_confirm_assigned_no, F.data == "confirm_assigned_no")
    dp.callback_query.register(task_actions_handler.handle_edit_fields, F.data == "edit_fields")
    dp.callback_query.register(task_actions_handler.handle_edit_field_selection, F.data.startswith("edit_"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞—á
    dp.callback_query.register(task_actions_handler.handle_mark_done, F.data.startswith("mark_done_"))
    dp.callback_query.register(task_actions_handler.handle_extend_deadline, F.data.startswith("extend_deadline_"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    dp.callback_query.register(task_list_handler.handle_view_task, F.data.startswith("view_task_"))
    dp.callback_query.register(task_list_handler.handle_task_page_navigation, F.data.startswith("task_page_"))
    dp.callback_query.register(task_list_handler.handle_task_list_menu, F.data == "task_list")
    dp.callback_query.register(new_task_handler.start_collecting_task, F.data == "new_task")
    
    # –í –∫–æ–Ω—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∞–º—ã–π –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    dp.message.register(new_task_handler.route_message)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    scheduler.start_scheduler()
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –±–æ—Ç–∞")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        create_tables()
        add_comment_column()
        clear_pending_tasks()
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é!")
    finally:
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        if lock_handle:
            fcntl.flock(lock_handle, fcntl.LOCK_UN)
            lock_handle.close()
            logger.info("–§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")