from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import google_calendar
import asyncio
from database import get_tasks_due_in_one_hour, get_active_tasks
from aiogram import Bot
import os
from datetime import datetime, timedelta

from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")

scheduler = AsyncIOScheduler()

def start_scheduler():
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    scheduler.add_job(daily_deadline_check, 'cron', hour=9)  # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á –∑–∞ —á–∞—Å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    scheduler.add_job(hourly_deadline_check, 'interval', minutes=60)
    scheduler.start()

async def daily_deadline_check():
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    tasks = get_active_tasks(deadline=tomorrow)
    
    for task in tasks:
        user_id = task[1]  # user_id
        task_id = task[0]  # task_id
        title = task[2]    # title
        deadline = task[3] # deadline

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"mark_done_{task_id}"),
                InlineKeyboardButton(text="‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"extend_deadline_{task_id}")
            ]
        ])

        try:
            await bot.send_message(
                chat_id=user_id,
                text=(
                    f"‚ö†Ô∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!</b>\n"
                    f"–ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏:\n"
                    f"üìå <b>{title}</b>\n"
                    f"üóì {deadline}"
                ),
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def hourly_deadline_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á: –µ—Å–ª–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ 1-1.5 —á–∞—Å–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    print(f"–í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞—á —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º—Å—è –¥–µ–¥–ª–∞–π–Ω–æ–º: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    tasks = get_tasks_due_in_one_hour()
    
    if not tasks:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º—Å—è –¥–µ–¥–ª–∞–π–Ω–æ–º")
        return
        
    for task in tasks:
        user_id = task[1]  # user_id
        task_id = task[0]  # task_id
        title = task[2]    # title
        deadline = task[3] # deadline date
        time = task[4] or "10:00"  # deadline time (HH:MM)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
        deadline_dt = datetime.strptime(f"{deadline} {time}", "%Y-%m-%d %H:%M")
        now = datetime.now()
        time_left = deadline_dt - now
        minutes_left = int(time_left.total_seconds() / 60)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        if minutes_left <= 60:
            time_msg = f"–î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ —á–∞—Å–∞!"
        else:
            hours = minutes_left // 60
            mins = minutes_left % 60
            time_msg = f"–î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å {hours} —á {mins} –º–∏–Ω"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"mark_done_{task_id}"),
                InlineKeyboardButton(text="‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"extend_deadline_{task_id}")
            ]
        ])

        try:
            await bot.send_message(
                chat_id=user_id,
                text=(
                    f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!</b>\n"
                    f"{time_msg}\n"
                    f"üìå <b>{title}</b>\n"
                    f"üóì {deadline} {time}"
                ),
                reply_markup=keyboard
            )
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞–¥–∞—á–µ {title}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")